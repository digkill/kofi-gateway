package grpc

import (
	"context"
	"fmt"
	"google.golang.org/grpc"
	"kofi-gateway/internal/db"
	"kofi-gateway/internal/payment"
	pb "kofi-gateway/proto"
	"log"
	"net"
)

type PaymentServer struct {
	pb.UnimplementedPaymentServiceServer
}

// ‚úÖ –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
func (s *PaymentServer) RequestPayment(ctx context.Context, req *pb.PaymentRequest) (*pb.PaymentResponse, error) {
	log.Printf("üí≥ RequestPayment: user_id=%d, credits=%d, amount=%d, email=%s, provider=%s",
		req.UserId, req.Credits, req.Amount, req.Email, req.Provider)

	link, err := payment.GeneratePaymentLink(req.OrderId, req.Amount, req.Email)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ Ko-fi: %v", err)
		return &pb.PaymentResponse{
			Status:  "error",
			Message: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã",
		}, nil
	}

	// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É
	tx := db.Transaction{
		MessageID: req.OrderId,
		UserID:    req.UserId,
		Email:     req.Email,
		Type:      "payment",
		TierName:  "default",
		Amount:    fmt.Sprintf("%d", req.Amount),
		Currency:  "RUB",
		Data: map[string]interface{}{
			"provider": req.Provider,
			"credits":  req.Credits,
			"link":     link,
		},
	}

	if err := db.SaveTransaction(tx); err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: %v", err)
		return &pb.PaymentResponse{
			Status:  "error",
			Message: "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
		}, nil
	}

	log.Printf("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s", link)

	return &pb.PaymentResponse{
		Status:      "ok",
		PaymentLink: link,
		Message:     "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
	}, nil
}

// ‚úÖ –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —à–ª—é–∑–æ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
func (s *PaymentServer) ConfirmPayment(ctx context.Context, req *pb.PaymentRequest) (*pb.PaymentResponse, error) {
	log.Printf("‚úÖ ConfirmPayment: user_id=%d, amount_rub=%d, credits=%d, email=%s, order_id=%s",
		req.UserId, req.Amount, req.Credits, req.Email, req.OrderId)

	// üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ user_id
	if req.UserId == 0 {
		return &pb.PaymentResponse{
			Status:  "error",
			Message: "–ù–µ —É–∫–∞–∑–∞–Ω user_id",
		}, nil
	}

	// üí∞ –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	err := db.AddCredits(req.UserId, int(req.Credits))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: %v", err)
		return &pb.PaymentResponse{
			Status:  "error",
			Message: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã",
		}, nil
	}

	// üßæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	tx := db.Transaction{
		MessageID: req.OrderId,
		UserID:    req.UserId,
		Email:     req.Email,
		Type:      "confirm",
		TierName:  "confirmed",
		Amount:    fmt.Sprintf("%d", req.Amount),
		Currency:  "RUB",
		Data: map[string]interface{}{
			"provider": req.Provider,
			"credits":  req.Credits,
			"status":   "confirmed",
		},
	}

	if err := db.SaveTransaction(tx); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
	}

	log.Printf("üéâ –ö—Ä–µ–¥–∏—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (+%d)", req.UserId, req.Credits)

	return &pb.PaymentResponse{
		Status:  "ok",
		Message: "–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã",
	}, nil
}

// üöÄ –ó–∞–ø—É—Å–∫ gRPC-—Å–µ—Ä–≤–µ—Ä–∞
func StartGRPCServer() {
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å gRPC-—Å–µ—Ä–≤–µ—Ä: %v", err)
	}

	s := grpc.NewServer()
	pb.RegisterPaymentServiceServer(s, &PaymentServer{})

	log.Println("üöÄ gRPC —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ :50051")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ gRPC-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
